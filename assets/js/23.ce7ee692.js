(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{710:function(n,e,r){"use strict";r.r(e);var s=r(47),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[n._v("#")]),n._v(" Реалізація інформаційного та програмного забезпечення")]),n._v(" "),r("h2",{attrs:{id:"sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[n._v("#")]),n._v(" SQL-скрипт для створення на початкового наповнення бази даних")]),n._v(" "),r("div",{staticClass:"language-mysql extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("-- MySQL Script generated by MySQL Workbench\n-- Tue May 30 00:07:17 2023\n-- Model: New Model    Version: 1.0\n-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema open_data_management_system\n-- -----------------------------------------------------\n-- \n-- \nDROP SCHEMA IF EXISTS `open_data_management_system` ;\n\n-- -----------------------------------------------------\n-- Schema open_data_management_system\n--\n-- \n-- \n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `open_data_management_system` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;\nUSE `open_data_management_system` ;\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`Group`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`Group` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`Group` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `idGroup_UNIQUE` (`id` ASC) VISIBLE)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`Donate`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`Donate` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`Donate` (\n  `id` INT NOT NULL,\n  `details` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`User`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`User` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`User` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(45) NOT NULL,\n  `email` VARCHAR(45) NOT NULL,\n  `password` VARCHAR(45) NOT NULL,\n  `avatar` VARCHAR(45) NOT NULL,\n  `first_name` VARCHAR(45) NOT NULL,\n  `last_name` VARCHAR(45) NOT NULL,\n  `id_group` INT NOT NULL,\n  `id_donate` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,\n  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,\n  INDEX `fk_User_Group1_idx` (`id_group` ASC) VISIBLE,\n  INDEX `fk_User_Donate1_idx` (`id_donate` ASC) VISIBLE,\n  CONSTRAINT `fk_User_Group1`\n    FOREIGN KEY (`id_group`)\n    REFERENCES `open_data_management_system`.`Group` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_User_Donate1`\n    FOREIGN KEY (`id_donate`)\n    REFERENCES `open_data_management_system`.`Donate` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`Permission`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`Permission` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`Permission` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`Data`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`Data` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`Data` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(45) NOT NULL,\n  `date_create` DATE NOT NULL,\n  `id_creator` INT NOT NULL,\n  `file_csv` VARCHAR(45) NOT NULL,\n  `vis_exist` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`Category`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`Category` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`Category` (\n  `name` VARCHAR(45) NOT NULL,\n  `id_data` INT NOT NULL,\n  `id_user` INT NOT NULL,\n  INDEX `fk_Category_Data1_idx` (`id_data` ASC) VISIBLE,\n  INDEX `fk_Category_User1_idx` (`id_user` ASC) VISIBLE,\n  CONSTRAINT `fk_Category_Data1`\n    FOREIGN KEY (`id_data`)\n    REFERENCES `open_data_management_system`.`Data` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_Category_User1`\n    FOREIGN KEY (`id_user`)\n    REFERENCES `open_data_management_system`.`User` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `open_data_management_system`.`Access`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `open_data_management_system`.`Access` ;\n\nCREATE TABLE IF NOT EXISTS `open_data_management_system`.`Access` (\n  `id_group` INT NOT NULL,\n  `id_permission` INT NOT NULL,\n  INDEX `fk_Access_Group1_idx` (`id_group` ASC) VISIBLE,\n  INDEX `fk_Access_Permission1_idx` (`id_permission` ASC) VISIBLE,\n  CONSTRAINT `fk_Access_Group1`\n    FOREIGN KEY (`id_group`)\n    REFERENCES `open_data_management_system`.`Group` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_Access_Permission1`\n    FOREIGN KEY (`id_permission`)\n    REFERENCES `open_data_management_system`.`Permission` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n\n")])])]),r("h2",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[n._v("#")]),n._v(" RESTfull сервіс для управління даними")]),n._v(" "),r("h3",{attrs:{id:"налаштування-express-сервера"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#налаштування-express-сервера"}},[n._v("#")]),n._v(" Налаштування Express сервера")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('const express = require("express");\nconst cors = require("cors");\nconst router = require("./routes");\nconst AppError = require("./utils/appError");\nconst errorHandler = require("./utils/errorHandler");\n\n\nconst app = express()\nconst PORT = 3000\n\napp.use(express.json());\napp.use(cors());\napp.use("/api", router);\n\napp.all("*", (req, res, next) => {\n    next(new AppError(`The URL ${req.originalUrl} does not exist`, 404))\n})\napp.use(errorHandler)\n\n\napp.listen(PORT, ()=>{\n    console.log(`server running on port ${PORT}`)\n})\n\nmodule.exports = app\n')])])]),r("h3",{attrs:{id:"підключення-до-mysql"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#підключення-до-mysql"}},[n._v("#")]),n._v(" Підключення до MySQL")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('const mysql = require("mysql")\n\nconst conn = mysql.createConnection({\n    host: "localhost",\n    user: "root",\n    password: "",\n    database: "open_data_management_system",\n});\n\nconn.connect();\n\nmodule.exports = conn;\n')])])]),r("h3",{attrs:{id:"створення-контроллерів-додатка"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#створення-контроллерів-додатка"}},[n._v("#")]),n._v(" Створення контроллерів додатка")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('const AppError = require("../utils/appError")\nconst conn = require("../service/db")\n\n\nexports.getAllUsers = (req, res, next) => {\n    conn.query("SELECT * FROM user", function (err, data, fields) {\n        if (err) return next(new AppError(err));\n            res.status(200).json({\n            status: "success",\n            length: data?.length,\n            data: data,\n        });\n    });\n};\n    \n    \nexports.createUser = (req, res, next) => {\n    if (!req.body) return next(new AppError("No form data found", 404));\n    const values = [\n        req.body.username,\n        req.body.email,\n        req.body.password,\n        req.body.avatar,\n        req.body.first_name,\n        req.body.last_name,\n        req.body.id_group,\n        req.body.id_donate,\n    ];\n    conn.query(\n        "INSERT INTO `user` (username, email, password, avatar, first_name, last_name, id_group, id_donate) VALUES (?)",\n        [values],\n        function (err, data, fields) {\n            if (err) return next(new AppError(err, 500));\n            res.status(200).json({\n                status: "success",\n                message: "user added!",\n            });\n        }\n    );\n};\n    \n    \nexports.getUserById = (req, res, next) => {\n    if (!req.params.id) {\n        return next(new AppError("No user id found", 404));\n    }\n    conn.query(\n        "SELECT * FROM User WHERE id = ?",\n        [req.params.id],\n        function (err, data, fields) {\n        if (err) return next(new AppError(err, 500));\n            res.status(200).json({\n            status: "success",\n                length: data?.length,\n                data: data,\n            });\n        }\n    );\n};\n    \n    \nexports.updateUser = (req, res, next) => {\n    if (!req.params.id) {\n        return next(new AppError("No user id found", 404));\n    }\n    conn.query(\n        "UPDATE User SET username=?, email=?, password=?, first_name=?, last_name=?, id_group=? WHERE id=?",\n        [\n            req.body.username,\n            req.body.email,\n            req.body.password,\n            req.body.first_name,\n            req.body.last_name,\n            req.body.id_group,\n            req.params.id,\n    ],\n    function (err, data, fields) {\n        if (err) return next(new AppError(err, 500));\n            res.status(201).json({\n                status: "success",\n                message: "user info updated!",\n            });\n        }\n    );\n};\n    \n    \nexports.deleteUser = (req, res, next) => {\n    if (!req.params.id) {\n        return next(new AppError("No todo id found", 404));\n    }\n    conn.query(\n        "DELETE FROM User WHERE id=?",\n            [req.params.id],\n            function (err, fields) {\n            if (err) return next(new AppError(err, 500));\n            res.status(201).json({\n                status: "success",\n                message: "user deleted!",\n            });\n        }\n    );\n};\n\nexports.AllData = (req, res, next) => {\n    conn.query("SELECT * FROM data", function (err, data, fields) {\n        if (err) return next(new AppError(err));\n            res.status(200).json({\n            status: "success",\n            length: data?.length,\n            data: data,\n        });\n    });\n};\n\n\nexports.searchDataByName = (req, res, next) => {\n    if (!req.params.name) {\n        return next(new AppError("No such data", 404));\n    }\n    conn.query(\n        "SELECT * FROM Data WHERE name LIKE ?",\n        [req.params.name],\n        function (err, fields) {\n            if (err) return next(new AppError(err, 500));\n            res.status(200).json({\n                status: "success",\n                message: "data is found",\n                data: fields,\n            });\n        }\n    );\n};\n\nexports.updateData = (req, res, next) => {\n    if (!req.params.name) {\n        return next(new AppError("No such data", 404));\n    }\n    conn.query(\n        "UPDATE Data SET description=?, date_create=?, id_creator=?, file_csv=?, vis_exist=? WHERE name=?",\n        [\n            req.body.description,\n            req.body.date_create,\n            req.body.id_creator,\n            req.body.file_csv,\n            req.body.vis_exist,\n            req.params.name,\n        ],\n        function (err, data, fields) {\n            if (err) return next(new AppError(err, 500));\n            res.status(200).json({\n                status: "success",\n                message: "data info updated!",\n            });\n        }\n    );\n};\n\nexports.deleteData = (req, res, next) => {\n    if (!req.params.name) {\n        return next(new AppError("No todo id found", 404));\n    }\n    conn.query(\n        "DELETE FROM data WHERE name=?",\n            [req.params.name],\n            function (err, fields) {\n            if (err) return next(new AppError(err, 500));\n            res.status(201).json({\n                status: "success",\n                message: "data deleted!",\n            });\n        }\n    );\n};\n\nexports.createData = (req, res, next) => {\n    if (!req.body) return next(new AppError("No form data found", 404));\n    const values = [\n        req.body.id,\n        req.body.name,\n        req.body.description,\n        req.body.date_create,\n        req.body.id_creator,\n        req.body.file_csv,\n        req.body.vis_exist,\n    ];\n    conn.query(\n        "INSERT INTO data (id, name, description, date_create, id_creator, file_csv, vis_exist) VALUES(?)",\n        [values],\n        function (err, data, fields) {\n            if (err) return next(new AppError(err, 500));\n            res.status(200).json({\n                status: "success",\n                message: "data added!",\n            });\n        }\n    );\n};\n\nexports.showGroup = (req, res, next) => {\n    conn.query("SELECT * FROM `group`", function (err, data, fields) {\n        if (err) return next(new AppError(err));\n            res.status(200).json({\n            status: "succes",\n            length: data?.length,\n            data: data,\n        });\n    });\n};\n\n\nexports.showPermission = (req, res, next) => {\n    conn.query("SELECT * FROM permission", function (err, data, fields) {\n        if (err) return next(new AppError(err));\n            res.status(200).json({\n            status: "succes",\n            length: data?.length,\n            data: data,\n        });\n    });\n};\n\n')])])]),r("h3",{attrs:{id:"створення-гловальних-обробників-помилок"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#створення-гловальних-обробників-помилок"}},[n._v("#")]),n._v(" Створення гловальних обробників помилок")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('class AppError extends Error{\n    constructor(msg, statusCode){\n        super(msg);\n\n        this.statusCode = statusCode;\n        this.error = `${statusCode}`.startsWith("4") ? "fail" : "error";\n        this.isOperational = true;\n\n        Error.captureStackTrace(this, this.constructor)\n    }\n}\nmodule.exports = AppError;\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('module.exports = (err, req, res, next) => {\n    err.statusCode = err.statusCode || 500;\n    err.status = err.status || "error";\n    res.status(err.statusCode).json({\n        status: err.status,\n        message: err.message,\n    })\n}\n')])])]),r("h3",{attrs:{id:"створення-routes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#створення-routes"}},[n._v("#")]),n._v(" Створення routes")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('const express = require("express");\nconst controllers = require("../controllers");\nconst router = express.Router();\n\nrouter.route("/User/:id")\n  .get(controllers.getUserById)\n  .put(controllers.updateUser)\n  .delete(controllers.deleteUser);\n\nrouter.route("/getAllUsers")\n  .get(controllers.getAllUsers);\n\nrouter.route("/User")\n  .get(controllers.getAllUsers)\n  .post(controllers.createUser);\n  \n\nrouter.route("/Data")\n  .get(controllers.AllData)\n\nrouter.route("/Data/:name")\n  .get(controllers.searchDataByName)\n  .post(controllers.createData)\n  .put(controllers.updateData)\n  .delete(controllers.deleteData);\n\nrouter.route("/Group")\n  .get(controllers.showGroup);\n\nmodule.exports = router;\n')])])])])}),[],!1,null,null,null);e.default=t.exports}}]);